import streamlit as st
import pandas as pd
import plotly.express as px
import plotly.graph_objects as go
from enhanced_data_processor import EnhancedDataProcessor
from datetime import date, datetime
import numpy as np
import plotly.io as pio
from reportlab.lib.pagesizes import A4
from reportlab.platypus import SimpleDocTemplate, Paragraph, Spacer, Table, TableStyle, Image as RLImage
from reportlab.lib.styles import getSampleStyleSheet, ParagraphStyle
from reportlab.lib import colors
from reportlab.lib.units import inch
from io import BytesIO
import tempfile
import os
import calendar

def show_period_comparison_page():
    """P√°gina para comparar mismos per√≠odos de diferentes a√±os"""
    st.markdown("<h1 style='text-align: center;'>Comparaci√≥n de Per√≠odos</h1>", unsafe_allow_html=True)
    st.markdown("---")
    
    st.markdown("""
    <div style='text-align: center;'>
    <h3>An√°lisis Comparativo por A√±os</h3>
    <p>Compara el <strong>mismo per√≠odo</strong> de <strong>diferentes a√±os</strong> para an√°lisis estacional</p>
    </div>
    """, unsafe_allow_html=True)
    
    # Inicializar procesador
    processor = initialize_processor()
    
    if processor is None:
        st.error("No se pudieron cargar los datos. Verifique que existan datos en la base de datos.")
        return
    
    # Obtener a√±os y per√≠odos disponibles
    available_data = get_available_years_and_periods(processor)
    
    if not available_data:
        st.error("No se pudo obtener informaci√≥n de a√±os y per√≠odos disponibles")
        return
    
    # Configuraci√≥n de comparaci√≥n
    st.markdown("<h3 style='text-align: center;'>Configuraci√≥n de Comparaci√≥n</h3>", unsafe_allow_html=True)
    
    # Interfaz para seleccionar per√≠odo y a√±os
    comparison_config = configure_year_comparison(available_data)
    
    # Bot√≥n para ejecutar comparaci√≥n
    if st.button("üîÑ Ejecutar Comparaci√≥n", type="primary"):
        if validate_year_comparison(comparison_config):
            with st.spinner("Procesando comparaci√≥n..."):
                # Guardar datos en session_state para mantener persistencia
                st.session_state.year_comparison_data = execute_year_comparison(processor, comparison_config)
                st.session_state.comparison_config = comparison_config
        else:
            st.error("Por favor seleccione al menos 2 a√±os para comparar")
    
    # Mostrar resultados si existen en session_state
    if 'year_comparison_data' in st.session_state and st.session_state.year_comparison_data:
        show_year_comparison_results(
            st.session_state.year_comparison_data, 
            st.session_state.comparison_config,
            processor
        )

@st.cache_data
def initialize_processor():
    """Inicializa el procesador de datos"""
    try:
        processor = EnhancedDataProcessor()
        if processor.initialize_from_database():
            return processor
        return None
    except Exception as e:
        st.error(f"Error inicializando procesador: {str(e)}")
        return None

def get_available_years_and_periods(processor):
    """Obtiene a√±os y per√≠odos disponibles en los datos"""
    try:
        if processor.df is not None and not processor.df.empty:
            df = processor.df.copy()
            df['fecha_emision'] = pd.to_datetime(df['fecha_emision'])
            
            # Obtener a√±os disponibles (convertir a int para compatibilidad con Streamlit)
            years = sorted([int(year) for year in df['fecha_emision'].dt.year.unique()])
            
            # Obtener meses disponibles por a√±o
            months_by_year = {}
            for year in years:
                year_data = df[df['fecha_emision'].dt.year == year]
                months = sorted(year_data['fecha_emision'].dt.month.unique())
                months_by_year[year] = months
            
            # Definir per√≠odos disponibles
            periods = {
                'A√±o Completo': list(range(1, 13)),  # Todos los meses del a√±o
                'Enero': 1, 'Febrero': 2, 'Marzo': 3, 'Abril': 4, 'Mayo': 5, 'Junio': 6,
                'Julio': 7, 'Agosto': 8, 'Septiembre': 9, 'Octubre': 10, 'Noviembre': 11, 'Diciembre': 12,
                'Q1 (Ene-Mar)': [1, 2, 3], 'Q2 (Abr-Jun)': [4, 5, 6], 
                'Q3 (Jul-Sep)': [7, 8, 9], 'Q4 (Oct-Dic)': [10, 11, 12]
            }
            
            return {
                'years': years,
                'months_by_year': months_by_year,
                'periods': periods,
                'min_date': df['fecha_emision'].min().date(),
                'max_date': df['fecha_emision'].max().date()
            }
        return None
    except Exception as e:
        st.error(f"Error obteniendo a√±os y per√≠odos: {str(e)}")
        return None

def configure_year_comparison(available_data):
    """Configura la comparaci√≥n por a√±os del mismo per√≠odo"""
    
    col1, col2 = st.columns([1, 1])
    
    with col1:
        st.markdown("#### üìÖ Seleccionar Per√≠odo")
        
        # Dropdown para seleccionar per√≠odo
        period_options = list(available_data['periods'].keys())
        selected_period = st.selectbox(
            "Per√≠odo a comparar:",
            options=period_options,
            key="selected_period"
        )
        
        # Mostrar informaci√≥n del per√≠odo seleccionado
        period_value = available_data['periods'][selected_period]
        if isinstance(period_value, list):
            period_info = f"Meses: {', '.join([calendar.month_name[m] for m in period_value])}"
        else:
            period_info = f"Mes: {calendar.month_name[period_value]}"
        
        st.info(f"üìä {period_info}")
    
    with col2:
        st.markdown("#### üóìÔ∏è Seleccionar A√±os")
        
        # Multiselect para a√±os
        available_years = available_data['years']
        selected_years = st.multiselect(
            "A√±os a comparar:",
            options=available_years,
            default=available_years[:2] if len(available_years) >= 2 else available_years,
            key="selected_years"
        )
        
        st.info(f"üìà Se comparar√°n {len(selected_years)} a√±os")
    
    return {
        'period_name': selected_period,
        'period_value': period_value,
        'selected_years': selected_years,
        'available_data': available_data
    }

def get_year_color(year_idx):
    """Obtiene color para cada a√±o"""
    colors = ['#1f77b4', '#ff7f0e', '#2ca02c', '#d62728', '#9467bd', '#8c564b', '#e377c2']
    return colors[year_idx % len(colors)]

def validate_year_comparison(comparison_config):
    """Valida que al menos 2 a√±os est√©n seleccionados"""
    return len(comparison_config['selected_years']) >= 2

def execute_year_comparison(processor, comparison_config):
    """Ejecuta la comparaci√≥n entre a√±os del mismo per√≠odo"""
    
    year_data = {}
    period_value = comparison_config['period_value']
    
    for year in comparison_config['selected_years']:
        # Obtener datos para este a√±o y per√≠odo espec√≠fico
        year_period_data = get_year_period_data(processor, year, period_value)
        if year_period_data:
            year_data[year] = year_period_data
    
    if len(year_data) < 2:
        st.error("No se pudieron obtener datos suficientes para comparar")
        return None
    
    return year_data

def get_year_period_data(processor, year, period_value):
    """Obtiene datos para un a√±o y per√≠odo espec√≠ficos"""
    try:
        if processor.df is None or processor.df.empty:
            return None
        
        df = processor.df.copy()
        df['fecha_emision'] = pd.to_datetime(df['fecha_emision'])
        
        # Filtrar por a√±o
        year_data = df[df['fecha_emision'].dt.year == year]
        
        if year_data.empty:
            return None
        
        # Filtrar por per√≠odo (mes o trimestre)
        if isinstance(period_value, list):
            # Es un trimestre
            period_data = year_data[year_data['fecha_emision'].dt.month.isin(period_value)]
        else:
            # Es un mes espec√≠fico
            period_data = year_data[year_data['fecha_emision'].dt.month == period_value]
        
        if period_data.empty:
            return None
        
        # Calcular estad√≠sticas b√°sicas
        stats = {
            'total_ingresos': period_data['ingresos_totales'].sum(),
            'total_tramites': period_data['num_tramites'].sum(),
            'ingreso_diario_promedio': period_data.groupby(period_data['fecha_emision'].dt.date)['ingresos_totales'].sum().mean(),
            'tramite_diario_promedio': period_data.groupby(period_data['fecha_emision'].dt.date)['num_tramites'].sum().mean(),
            'num_dias': period_data['fecha_emision'].dt.date.nunique(),
            'num_servicios': period_data['servicio'].nunique()
        }
        
        return {
            'data': period_data,
            'stats': stats,
            'year': year,
            'period_value': period_value
        }
        
    except Exception as e:
        st.error(f"Error obteniendo datos del a√±o {year}: {str(e)}")
        return None

def show_year_comparison_results(year_data, comparison_config, processor):
    """Muestra los resultados de la comparaci√≥n por a√±os"""
    
    st.markdown("<h2 style='text-align: center;'>üìä Resultados de la Comparaci√≥n</h2>", unsafe_allow_html=True)
    st.markdown("---")
    
    # Informaci√≥n del per√≠odo
    period_name = comparison_config['period_name']
    years_compared = list(year_data.keys())
    
    st.info(f"üìÖ **Per√≠odo analizado:** {period_name} | üóìÔ∏è **A√±os comparados:** {', '.join(map(str, years_compared))}")
    
    # KPIs comparativos
    show_year_comparative_kpis(year_data)
    
    st.markdown("---")
    
    # Controles y gr√°fica principal
    show_year_timeline_chart(year_data, comparison_config)
    
    st.markdown("---")
    
    # Bot√≥n de exportaci√≥n PDF
    show_pdf_export_button(year_data, comparison_config)

def show_year_comparative_kpis(year_data):
    """Muestra KPIs comparativos por a√±o"""
    st.markdown("<h3 style='text-align: center;'>üìà KPIs Comparativos por A√±o</h3>", unsafe_allow_html=True)
    
    # Preparar datos para m√©tricas
    kpi_data = []
    years_list = sorted(year_data.keys())
    
    for year in years_list:
        stats = year_data[year]['stats']
        kpi_data.append({
            'a√±o': year,
            'ingresos_totales': stats['total_ingresos'],
            'tramites_totales': stats['total_tramites'],
            'ingreso_diario_promedio': stats['ingreso_diario_promedio'],
            'tramite_diario_promedio': stats['tramite_diario_promedio']
        })
    
    df_kpis = pd.DataFrame(kpi_data)
    
    # Calcular variaciones respecto al primer a√±o
    base_year = years_list[0]
    base_ingresos = df_kpis[df_kpis['a√±o'] == base_year]['ingresos_totales'].iloc[0]
    base_tramites = df_kpis[df_kpis['a√±o'] == base_year]['tramites_totales'].iloc[0]
    
    # Mostrar m√©tricas en columnas
    col1, col2, col3, col4 = st.columns(4)
    
    with col1:
        st.markdown("<h4 style='text-align: center;'>üí∞ Ingresos Totales</h4>", unsafe_allow_html=True)
        for _, row in df_kpis.iterrows():
            if row['a√±o'] == base_year:
                delta = None
            else:
                delta = f"${(row['ingresos_totales'] - base_ingresos):,.2f}"
            
            st.metric(
                f"{row['a√±o']}",
                f"${row['ingresos_totales']:,.2f}",
                delta=delta
            )
    
    with col2:
        st.markdown("<h4 style='text-align: center;'>üìÑ Tr√°mites Totales</h4>", unsafe_allow_html=True)
        for _, row in df_kpis.iterrows():
            if row['a√±o'] == base_year:
                delta = None
            else:
                delta = f"{(row['tramites_totales'] - base_tramites):,}"
            
            st.metric(
                f"{row['a√±o']}",
                f"{row['tramites_totales']:,}",
                delta=delta
            )
    
    with col3:
        st.markdown("<h4 style='text-align: center;'>üìä Ingreso/D√≠a Promedio</h4>", unsafe_allow_html=True)
        for _, row in df_kpis.iterrows():
            st.metric(
                f"{row['a√±o']}",
                f"${row['ingreso_diario_promedio']:,.2f}"
            )
    
    with col4:
        st.markdown("<h4 style='text-align: center;'>üìã Tr√°mites/D√≠a Promedio</h4>", unsafe_allow_html=True)
        for _, row in df_kpis.iterrows():
            st.metric(
                f"{row['a√±o']}",
                f"{row['tramite_diario_promedio']:,.1f}"
            )

def show_year_timeline_chart(year_data, comparison_config):
    """Muestra gr√°fica consolidada con l√≠neas por a√±o"""
    st.markdown("<h3 style='text-align: center;'>üìà Comportamiento Temporal por A√±o</h3>", unsafe_allow_html=True)
    
    # Controles para las gr√°ficas
    control_col1, control_col2 = st.columns(2)
    
    with control_col1:
        # Obtener servicios disponibles para el dropdown expandido
        all_services = set()
        for year_info in year_data.values():
            all_services.update(year_info['data']['servicio'].unique())
        
        metric_options = {
            'ingresos_totales': 'üí∞ Ingresos Totales',
            'num_tramites': 'üìÑ N√∫mero de Tr√°mites Totales'
        }
        
        # Agregar servicios individuales al dropdown
        for service in sorted(all_services):
            metric_options[f'servicio_{service}'] = f'üîß {service}'
        
        selected_metric = st.selectbox(
            "Elemento a revisar:",
            options=list(metric_options.keys()),
            format_func=lambda x: metric_options[x],
            key="year_timeline_metric"
        )
    
    with control_col2:
        grouping_options = {
            'dia': 'üìÖ Diario',
            'semana': 'üìÜ Semanal',
            'mes': 'üóìÔ∏è Mensual'
        }
        
        selected_grouping = st.selectbox(
            "Agrupaci√≥n temporal:",
            options=list(grouping_options.keys()),
            format_func=lambda x: grouping_options[x],
            key="year_timeline_grouping"
        )
    
    # Crear gr√°fica consolidada con l√≠neas por a√±o
    st.markdown("---")
    
    metric_label = metric_options[selected_metric]
    st.markdown(f"#### {metric_label} - Comparaci√≥n por A√±os")
    
    # Guardar configuraci√≥n de gr√°fica para exportaci√≥n PDF
    if 'chart_config' not in st.session_state:
        st.session_state.chart_config = {}
    
    fig = create_year_comparison_chart(year_data, selected_metric, selected_grouping, metric_label, comparison_config)
    
    if fig:
        st.session_state.chart_config = {
            'figure': fig,
            'metric': selected_metric,
            'grouping': selected_grouping,
            'metric_label': metric_label
        }
        st.plotly_chart(fig, use_container_width=True)
    else:
        st.warning("No se pudieron generar datos para la gr√°fica con la configuraci√≥n seleccionada.")

def create_year_comparison_chart(year_data, metric, grouping, metric_label, comparison_config):
    """Crea una gr√°fica consolidada con l√≠neas por a√±o del mismo per√≠odo"""
    
    fig = go.Figure()
    years_list = sorted(year_data.keys())
    
    for i, year in enumerate(years_list):
        year_info = year_data[year]
        df = year_info['data'].copy()
        df['fecha_emision'] = pd.to_datetime(df['fecha_emision'])
        
        # Filtrar por servicio espec√≠fico si se seleccion√≥
        if metric.startswith('servicio_'):
            service_name = metric.replace('servicio_', '')
            df = df[df['servicio'] == service_name]
            if df.empty:
                continue
        
        # Aplicar agrupaci√≥n temporal
        if grouping == 'dia':
            df['periodo'] = df['fecha_emision'].dt.day
            df['periodo_label'] = df['fecha_emision'].dt.strftime('%d')
            x_title = 'D√≠a del Per√≠odo'
        elif grouping == 'semana':
            df['periodo'] = df['fecha_emision'].dt.isocalendar().week
            df['periodo_label'] = 'S' + df['fecha_emision'].dt.isocalendar().week.astype(str)
            x_title = 'Semana del A√±o'
        elif grouping == 'mes':
            df['periodo'] = df['fecha_emision'].dt.month
            df['periodo_label'] = df['fecha_emision'].dt.strftime('%b')
            x_title = 'Mes'
        else:
            continue
        
        # Agrupar datos seg√∫n la m√©trica seleccionada
        if metric == 'ingresos_totales':
            grouped_data = df.groupby(['periodo', 'periodo_label'])['ingresos_totales'].sum().reset_index()
            y_column = 'ingresos_totales'
        elif metric == 'num_tramites':
            grouped_data = df.groupby(['periodo', 'periodo_label'])['num_tramites'].sum().reset_index()
            y_column = 'num_tramites'
        elif metric.startswith('servicio_'):
            # Para servicios espec√≠ficos, usar ingresos totales
            grouped_data = df.groupby(['periodo', 'periodo_label'])['ingresos_totales'].sum().reset_index()
            y_column = 'ingresos_totales'
        else:
            continue
        
        if not grouped_data.empty:
            # Agregar l√≠nea para este a√±o
            color = get_year_color(i)
            fig.add_trace(go.Scatter(
                x=grouped_data['periodo_label'],
                y=grouped_data[y_column],
                mode='lines+markers',
                name=f'{year}',
                line=dict(
                    color=color, 
                    width=3
                ),
                marker=dict(
                    size=8,
                    color=color
                ),
                hovertemplate=f'<b>{year}</b><br>' +
                             f'{x_title}: %{{x}}<br>' +
                             f'{metric_label}: %{{y:,.2f}}<extra></extra>'
            ))
    
    if fig.data:
        # Configurar layout de la gr√°fica
        period_name = comparison_config['period_name']
        fig.update_layout(
            title=f'{metric_label} - {period_name} por A√±o',
            xaxis_title=x_title,
            yaxis_title=metric_label,
            height=600,
            hovermode='x unified',
            legend=dict(
                orientation="h",
                yanchor="bottom",
                y=1.02,
                xanchor="center",
                x=0.5,
                title="A√±o"
            ),
            plot_bgcolor='white',
            paper_bgcolor='white',
            showlegend=True
        )
        
        # Mejorar aspecto visual
        fig.update_xaxes(
            showgrid=True,
            gridwidth=1,
            gridcolor='lightgray'
        )
        fig.update_yaxes(
            showgrid=True,
            gridwidth=1,
            gridcolor='lightgray'
        )
        
        return fig
    
    return None


def show_pdf_export_button(year_data, comparison_config):
    """Muestra bot√≥n para exportar a PDF"""
    st.markdown("<h3 style='text-align: center;'>üìÑ Exportar Reporte</h3>", unsafe_allow_html=True)
    
    col1, col2, col3 = st.columns([1, 1, 1])
    
    with col2:
        if st.button("üìÑ Generar y Descargar PDF", type="primary", use_container_width=True):
            with st.spinner("Generando reporte PDF..."):
                try:
                    pdf_buffer = create_pdf_report(year_data, comparison_config)
                    
                    if pdf_buffer:
                        # Generar nombre de archivo
                        period_name = comparison_config['period_name'].replace(' ', '_').replace('/', '-')
                        years_str = '_'.join(map(str, sorted(year_data.keys())))
                        filename = f"comparacion_{period_name}_{years_str}_{datetime.now().strftime('%Y%m%d_%H%M')}.pdf"
                        
                        st.download_button(
                            label="‚¨áÔ∏è Descargar PDF",
                            data=pdf_buffer,
                            file_name=filename,
                            mime="application/pdf",
                            use_container_width=True
                        )
                        
                        st.success("‚úÖ PDF generado exitosamente")
                    else:
                        st.error("‚ùå Error al generar el PDF")
                        
                except Exception as e:
                    st.error(f"‚ùå Error generando PDF: {str(e)}")

def create_pdf_report(year_data, comparison_config):
    """Crea el reporte PDF completo"""
    try:
        buffer = BytesIO()
        doc = SimpleDocTemplate(buffer, pagesize=A4, 
                               rightMargin=72, leftMargin=72,
                               topMargin=72, bottomMargin=18)
        
        # Obtener estilos
        styles = getSampleStyleSheet()
        title_style = ParagraphStyle(
            'CustomTitle',
            parent=styles['Heading1'],
            fontSize=16,
            spaceAfter=30,
            alignment=1  # Centro
        )
        
        # Contenido del PDF
        story = []
        
        # T√≠tulo
        period_name = comparison_config['period_name']
        years_list = sorted(year_data.keys())
        years_str = ', '.join(map(str, years_list))
        
        story.append(Paragraph(f"Comparaci√≥n de Per√≠odos: {period_name}", title_style))
        story.append(Paragraph(f"A√±os comparados: {years_str}", styles['Normal']))
        story.append(Paragraph(f"Fecha de reporte: {datetime.now().strftime('%d/%m/%Y %H:%M')}", styles['Normal']))
        story.append(Spacer(1, 12))
        
        # KPIs en tabla
        story.append(Paragraph("KPIs Comparativos por A√±o", styles['Heading2']))
        
        kpi_data = [['A√±o', 'Ingresos Totales', 'Tr√°mites Totales', 'Ingreso/D√≠a Promedio', 'Tr√°mites/D√≠a Promedio']]
        
        for year in years_list:
            stats = year_data[year]['stats']
            kpi_data.append([
                str(year),
                f"${stats['total_ingresos']:,.2f}",
                f"{stats['total_tramites']:,}",
                f"${stats['ingreso_diario_promedio']:,.2f}",
                f"{stats['tramite_diario_promedio']:,.1f}"
            ])
        
        kpi_table = Table(kpi_data)
        kpi_table.setStyle(TableStyle([
            ('BACKGROUND', (0, 0), (-1, 0), colors.grey),
            ('TEXTCOLOR', (0, 0), (-1, 0), colors.whitesmoke),
            ('ALIGN', (0, 0), (-1, -1), 'CENTER'),
            ('FONTNAME', (0, 0), (-1, 0), 'Helvetica-Bold'),
            ('FONTSIZE', (0, 0), (-1, 0), 10),
            ('BOTTOMPADDING', (0, 0), (-1, 0), 12),
            ('BACKGROUND', (0, 1), (-1, -1), colors.beige),
            ('GRID', (0, 0), (-1, -1), 1, colors.black)
        ]))
        
        story.append(kpi_table)
        story.append(Spacer(1, 12))
        
        # Gr√°fica (si existe)
        if 'chart_config' in st.session_state and st.session_state.chart_config:
            story.append(Paragraph("Gr√°fica Comparativa", styles['Heading2']))
            
            try:
                fig = st.session_state.chart_config['figure']
                img_bytes = pio.to_image(fig, format="png", engine="kaleido", width=600, height=400)
                
                with tempfile.NamedTemporaryFile(delete=False, suffix=".png") as tmp:
                    tmp.write(img_bytes)
                    tmp.flush()
                    
                    story.append(RLImage(tmp.name, width=6*inch, height=4*inch))
                    story.append(Spacer(1, 12))
                    
                    # Limpiar archivo temporal
                    os.unlink(tmp.name)
                    
            except Exception as e:
                story.append(Paragraph(f"Error incluyendo gr√°fica: {str(e)}", styles['Normal']))
        
        
        # Construir PDF
        doc.build(story)
        buffer.seek(0)
        return buffer.getvalue()
        
    except Exception as e:
        st.error(f"Error creando PDF: {str(e)}")
        return None